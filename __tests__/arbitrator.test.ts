import sinon, { createSandbox } from 'sinon'
import * as providers from '../src/providers/dependencyGraph'
import { FetchedSbomDocument, Provider } from '../src/types/arguments'
import { arbitrate } from '../src/providers/arbitrator'
import { ActionInputsBuilder, SAMPLE_REPOSITORY, SAMPLE_TOKEN } from './types'

let sandbox: sinon.SinonSandbox = createSandbox()

describe('Dependency Graph', () => {
  let response: FetchedSbomDocument
  let actionInputsBuilder: ActionInputsBuilder

  beforeEach(() => {
    actionInputsBuilder = new ActionInputsBuilder()
    sandbox.stub(providers, 'fetchFromDependencyGraph').resolves({
      document: {},
      documentName: {},
      type: 'spdx'
    } as FetchedSbomDocument)
  })

  afterEach(() => {
    sandbox.restore()
  })

  it('fetch from Dependency Graph', async () => {
    let inputs = actionInputsBuilder.provider(Provider.dependencyGraph).build()
    let document = await arbitrate(inputs)
    expect(document).toHaveProperty('document')
    expect(document).toHaveProperty('documentName')
    expect(document).toHaveProperty('type')
    expect(document?.type).toBe('spdx')
  })
})
