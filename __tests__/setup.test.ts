import sinon, { createSandbox } from 'sinon'
import { expect } from '@jest/globals'
import * as core from '@actions/core'
import { Provider } from '../src/types/action'
import { setup } from '@/src/utils/setup'

const mockedCore = {
  getInput: sinon.stub()
}
const sandbox = createSandbox()

import {
  SAMPLE_USER,
  SAMPLE_PASSWORD,
  SAMPLE_INSTANCE,
  SAMPLE_TOKEN,
  SAMPLE_BUSINESS_APPLICATION_NAME,
  SAMPLE_BUSINESS_APPLICATION_ID,
  SAMPLE_BUILD_ID,
  SAMPLE_PRODUCT_MODEL_ID,
  SAMPLE_REQUESTED_BY,
  PRE_PRODUCTION_LIFECYCLE_STAGE,
  SAMPLE_SOURCE_SBOM,
  SAMPLE_ACCOUNT_OWNER,
  SAMPLE_PROVIDER_REPOSITORY,
  SAMPLE_REPOSITORY,
  SAMPLE_PATH
} from './utils'

function _initCollectSecrets() {
  mockedCore.getInput.withArgs('snSbomUser').returns(SAMPLE_USER)
  mockedCore.getInput.withArgs('snSbomPassword').returns(SAMPLE_PASSWORD)
  mockedCore.getInput.withArgs('snInstanceUrl').returns(SAMPLE_INSTANCE)
  mockedCore.getInput.withArgs('ghToken').returns(SAMPLE_TOKEN)
}

function _initCollectApiArguments() {
  mockedCore.getInput.withArgs('businessApplicationId').returns(SAMPLE_BUSINESS_APPLICATION_ID)
  mockedCore.getInput.withArgs('businessApplicationName').returns(SAMPLE_BUSINESS_APPLICATION_NAME)
  mockedCore.getInput.withArgs('buildId').returns(SAMPLE_BUILD_ID)
  mockedCore.getInput.withArgs('productModelId').returns(SAMPLE_PRODUCT_MODEL_ID)
  mockedCore.getInput.withArgs('requestedBy').returns(SAMPLE_REQUESTED_BY)
  mockedCore.getInput.withArgs('lifecycleStage').returns(String(PRE_PRODUCTION_LIFECYCLE_STAGE))
  mockedCore.getInput.withArgs('fetchVulnerabilityInfo').returns('false')
  mockedCore.getInput.withArgs('fetchPackageInfo').returns('false')
  mockedCore.getInput.withArgs('sbomSource').returns(SAMPLE_SOURCE_SBOM)
}

function _initCollectActionArguments() {
  mockedCore.getInput.withArgs('ghAccountOwner').returns(SAMPLE_ACCOUNT_OWNER)
  mockedCore.getInput.withArgs('provider').returns(String(SAMPLE_PROVIDER_REPOSITORY))
  mockedCore.getInput.withArgs('repository').returns(SAMPLE_REPOSITORY)
  mockedCore.getInput.withArgs('path').returns(SAMPLE_PATH)
}

describe('setup', () => {
  beforeEach(() => {
    sandbox.stub(core, 'getInput').value(mockedCore.getInput)
  })

  afterEach(() => {
    sandbox.restore()
  })

  describe('arguments', () => {
    beforeAll(() => {
      _initCollectSecrets()
      _initCollectApiArguments()
      _initCollectActionArguments()
    })

    it('collect valid arguments', () => {
      const actionArguments = setup()
      const { secrets, sbomRestApiUploadArguments } = actionArguments
      expect(secrets.snSbomUser).toBe(SAMPLE_USER)
      expect(secrets.snSbomPassword).toEqual(SAMPLE_PASSWORD)
      expect(secrets.snInstanceUrl).toBe(SAMPLE_INSTANCE)
      expect(secrets.ghToken).toBe(SAMPLE_TOKEN)
      expect(sbomRestApiUploadArguments!.businessApplicationId).toBe(SAMPLE_BUSINESS_APPLICATION_ID)
      expect(sbomRestApiUploadArguments!.businessApplicationName).toBe(SAMPLE_BUSINESS_APPLICATION_NAME)
      expect(sbomRestApiUploadArguments!.buildId).toBe(SAMPLE_BUILD_ID)
      expect(sbomRestApiUploadArguments!.productModelId).toBe(SAMPLE_PRODUCT_MODEL_ID)
      expect(sbomRestApiUploadArguments!.requestedBy).toBe(SAMPLE_REQUESTED_BY)
      expect(sbomRestApiUploadArguments!.lifecycleStage).toBe('pre_production')
      expect(sbomRestApiUploadArguments!.fetchVulnerabilityInfo).toBe(false)
      expect(sbomRestApiUploadArguments!.fetchPackageInfo).toBe(false)
      expect(sbomRestApiUploadArguments!.sbomSource).toBe('sample-source-sbom')
      expect(actionArguments.ghAccountOwner).toBe(SAMPLE_ACCOUNT_OWNER)
      expect(actionArguments.provider).toBe(Provider.repository)
      expect(actionArguments.repository).toBe(SAMPLE_REPOSITORY)
      expect(actionArguments.path).toBe(SAMPLE_PATH)
    })
  })
})
