import sinon, { createSandbox, SinonStubbedInstance } from 'sinon'
import { fetchFromDependencyGraph } from '@/src/providers/dependencyGraph'
import {
  ActionInputsBuilder,
  SAMPLE_ACCOUNT_OWNER,
  SAMPLE_FETCHED_SBOM,
  SAMPLE_INSTANCE,
  SAMPLE_REPOSITORY,
  SAMPLE_TOKEN
} from './utils'
import * as utils from '@/src/providers/requestBuilder'
import { RequestBuilder } from '@/src/providers/requestBuilder'
import { ActionArguments, FetchedSbomDocument, Provider } from '../src/types/action'

const sandbox = createSandbox()
let mockedRequestBuilder = new RequestBuilder()

describe('Fetch from Dependency Graph', () => {
  let inputs: ActionArguments
  beforeEach(() => {
    inputs = new ActionInputsBuilder()
      .ghAccountOwner(SAMPLE_ACCOUNT_OWNER)
      .repository(SAMPLE_REPOSITORY)
      .ghToken(SAMPLE_TOKEN)
      .build()
    mockedRequestBuilder.url(new URL(inputs.secrets.snInstanceUrl))
    mockedRequestBuilder.header('Accept', 'application/vnd.github+json')
    mockedRequestBuilder.header('Authorization', `Bearer ${inputs.secrets.ghToken}`)
    mockedRequestBuilder.header('X-GitHub-Api-Version', '2022-11-28')
    sandbox.stub(utils, 'RequestBuilder').returns(mockedRequestBuilder)
  })

  afterEach(() => {
    sandbox.restore()
  })

  it('valid arguments', async () => {
    mockedRequestBuilder.build = sinon.stub().resolves({ status: 200, json: sinon.stub().returns(SAMPLE_FETCHED_SBOM) })

    let response = await fetchFromDependencyGraph(inputs)

    expect(response.type).toBe('spdx')
    expect(response.documentName).toBe('github/example')
    expect(response.document).toBe(SAMPLE_FETCHED_SBOM.sbom)
  })

  it('Invalid arguments :: Invalid Token', async () => {
    mockedRequestBuilder.build = sinon.stub().resolves({ status: 404, json: sinon.stub().returns('Invalid token') })

    expect(fetchFromDependencyGraph(inputs)).rejects.toThrow()
  })

  it('Invalid arguments :: Resource not found', async () => {
    mockedRequestBuilder.build = sinon.stub().resolves({
      status: 403,
      json: sinon.stub().returns('Resource not found')
    })

    expect(fetchFromDependencyGraph(inputs)).rejects.toThrow()
  })
})
