import { generateUploadUrl, upload } from '../src/api/upload'
import { ActionInputsBuilder, SAMPLE_FETCHED_SBOM } from './utils'
import { FetchedSbomDocument, UploadApiResponseBody, UploadApiResponseObject } from '../src/types/action'
import sinon, { createSandbox } from 'sinon'
import * as uploadUtils from '../src/api/upload'

const sandbox = createSandbox()

describe('Upload', () => {
  let actionInputsBuilder = new ActionInputsBuilder()

  afterEach(() => {
    sandbox.restore()
  })

  it('Should generate a URL with all the search parameters', async () => {
    let actionInputs = actionInputsBuilder.build()
    let url = generateUploadUrl(actionInputs)
    expect(url.href).toBe(
      'https://www.servicenow.com/api/sbom/core/upload?businessApplicationId=sample-business-application-id&businessApplicationName=sample-business-application-name&buildId=sample-build-id&productModelId=sample-product-model-id&requestedBy=sample-request-by&lifecycleStage=pre_production&sbomSource=sample-source-sbom'
    )
  })

  it('Should upload a document to SBOM Workspace', async () => {
    const SAMPLE_BOM_RECORD_ID = 'xyzABC'
    sandbox.stub(uploadUtils, '_performUpload').resolves({
      data: {
        result: {
          status: 'success',
          message: 'Queued for processing.',
          bomRecordId: SAMPLE_BOM_RECORD_ID
        }
      } as UploadApiResponseBody,
      documentName: 'sample-document'
    })

    let actionInputs = actionInputsBuilder.build()
    let payload: FetchedSbomDocument = {
      document: SAMPLE_FETCHED_SBOM,
      documentName: 'sample-spdx',
      type: 'spdx'
    }
    let response = await upload(actionInputs, payload)
    expect(response).toHaveProperty('data')
    expect(response).toHaveProperty('documentName')
    response = response as UploadApiResponseObject
    expect(response.data.result.status).toBe('success')
    expect(response.data.result.bomRecordId).toBe(SAMPLE_BOM_RECORD_ID)
    expect(response.data.result.message).toBe('Queued for processing.')
  })
})
