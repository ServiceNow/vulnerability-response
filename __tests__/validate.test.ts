import { expect } from '@jest/globals'
import { SchemaType } from '@/src/types/schemas'
import { validate } from '@/src/utils/validate'
import { ActionInputsBuilder, SAMPLE_REQUIRED_ACTION_INPUTS } from './utils'
import { UNABLE_TO_RESOLVE_SCHEMA } from '@/src/types/errors'
import { createSandbox } from 'sinon'
import * as core from '@actions/core'

describe('validate', () => {
  it('Should throw because invalid schema is selected', () => {
    validate(SAMPLE_REQUIRED_ACTION_INPUTS, 'invalid_schema' as any).catch(error => {
      expect(error.message).toBe(UNABLE_TO_RESOLVE_SCHEMA.message)
    })
  })

  it('Should validate against action input schema', async () => {
    let isValid = await validate(SAMPLE_REQUIRED_ACTION_INPUTS, SchemaType.action_inputs)
    expect(isValid).toBeTruthy()
  })

  it('Should throw validation error :: Provider', async () => {
    let observedError
    await validate({ ...SAMPLE_REQUIRED_ACTION_INPUTS, provider: 'invalid_provider' }, SchemaType.action_inputs).catch(
      error => {
        observedError = error
      }
    )
    expect(observedError).toBeTruthy()
  })

  it('Should throw validation error :: Lifecycle Stage', async () => {
    let observedError
    await validate(
      {
        ...SAMPLE_REQUIRED_ACTION_INPUTS,
        sbomRestApiArguments: { lifecycleStage: 'invalid_stage' }
      },
      SchemaType.action_inputs
    ).catch(error => {
      observedError = error
    })
    expect(observedError).toBeTruthy()
  })

  it('maxStatusPollAttempts', async () => {
    let observedError
    await validate(
      {
        ...SAMPLE_REQUIRED_ACTION_INPUTS,
        maxStatusPollAttempts: 6
      },
      SchemaType.action_inputs
    ).catch(error => {
      observedError = error
    })
    expect(observedError).toBeTruthy()
  })

  it('statusAttemptInterval', async () => {
    let observedError
    await validate(
      {
        ...SAMPLE_REQUIRED_ACTION_INPUTS,
        statusAttemptInterval: 4000
      },
      SchemaType.action_inputs
    ).catch(error => {
      observedError = error
    })
    expect(observedError).toBeTruthy()
  })
})
