import github from '@actions/github';
import core from '@actions/core';

/**
 * Checks out the SBOM document at a given path within the supplied repository.
 * @param token The GitHub token for the provider repository.
 * @param repo The name of the provider GitHub repository.
 * @param path The absolute path to the SBOM document from the root of the provider GitHub repository.
 * @param owner The name of the owner of the provider GitHub repository.
 */
export async function checkout({token, owner, repo, path}) {
    const gh = github.getOctokit(token);
    const resp = await gh.request(`GET /repos/{owner}/{repo}/contents/{path}`, {
        owner, path, repo, headers: {
            'X-GitHub-Api-Version': '2022-11-28',
            'Accept': 'application/vnd.github.object+json'
        }
    });

    if(resp.status !== 200) {
        console.error(resp);
        core.setFailed('Unsuccessful attempt to checkout GitHub repository.');
        throw new Error('Unsuccessful attempt to checkout GitHub repository.');
    }
    const type = resp.data.type;
    const data = resp.data;

    let downloadUrls, fileMetadata;
    if(type === 'dir') {
        core.setFailed('SBOM Workspace GitHub Action presently only supports uploading individual files one at a time.');
        return;
        // NOTE: Future support for uploading directories of SBOMs.
        // fileMetadata = data.entries.filter(entry => entry.type === 'file' && entry.name.endsWith("json")).map(entry => ({
        //     download_url: entry.download_url,
        //     file_name: entry.name
        // }));
        // downloadUrls = fileMetadata.map(({ download_url }) => download_url);
    } else {
        if(!resp.data.name.endsWith('.json')) {
            throw new Error('Only JSON files are supported.')
        }
        fileMetadata = [{
            download_url: resp.data.download_url,
            file_name: resp.data.name
        }]
        downloadUrls = [ resp.data.download_url ];
    }

    // let fileMetadata = data.entries.filter(entry => entry.type === 'file' && entry.name.endsWith("json")).map(entry => ({
    //     download_url: entry.download_url,
    //     file_name: entry.name
    // }));
    // let downloadUrls = fileMetadata.map(({ download_url }) => download_url);
    let fetchPromises = downloadUrls.map((contentUrl, idx) =>
        fetch(contentUrl)
            .then(response => response.json())
            .then(document => ({
                document,
                file_name: fileMetadata[idx]?.file_name ?? String()
            }))
    )
    let responses = await Promise.all(fetchPromises)
        .then(documents => documents)

    if(responses.length === 0) {
        core.setFailed(`No SBOM files identified at the following path: ${owner}/${repo}/${path}`);
        throw new Error(`No SBOM files identified at the following path: ${owner}/${repo}/${path}`);
    }

    // Future support for multiple files.
    // const spdxDocuments = documents.filter(document => document.hasOwnProperty("SPDXID"));
    // const cycloneDxDocuments = documents.filter(document => document.hasOwnProperty("bomFormat"));

    // Need to determine the uniqueness of a file.

    return responses
}