import github from '@actions/github';
import core from '@actions/core';

/**
 * Checks out the SBOM document at a given path within the supplied repository.
 * @param token The GitHub token for the provider repository.
 * @param repo The name of the provider GitHub repository.
 * @param path The absolute path to the SBOM document from the root of the provider GitHub repository.
 * @param owner The name of the owner of the provider GitHub repository.
 */
export async function checkout({token, owner, repo, path}) {
    const gh = github.getOctokit(token);
    const resp = await gh.request(`GET /repos/{owner}/{repo}/contents/{path}`, {
        owner, path, repo, headers: {
            'X-GitHub-Api-Version': '2022-11-28',
            'Accept': 'application/vnd.github.object+json'
        }
    });

    if(resp.status !== 200) {
        console.error(resp);
        core.setFailed('Unsuccessful attempt to checkout GitHub repository.');
        throw new Error('Unsuccessful attempt to checkout GitHub repository.');
    }
    const data = resp.data;
    console.log(`Detected path type: ${data.type}`);
    let downloadUrls = data.entries.filter(entry => entry.type === 'file').map(entry => entry.download_url);
    let fetchPromises = downloadUrls.map(contentUrl =>
        fetch(contentUrl)
            .then(response => response.json())
            .then(document => document)
    )
    let documents = await Promise.all(fetchPromises)
        .then(documents => documents)

    if(documents.length === 0) {
        core.setFailed(`No SBOM files identified at the following path: ${owner}/${repo}/${path}`);
        throw new Error(`No SBOM files identified at the following path: ${owner}/${repo}/${path}`);
    }

    // console.log(documents, documents.at(0))

    return documents.at(0)
}

// export async function checkoutDirectory({token, owner, repo, path}) {
//     const gh = github.getOctokit(token);
//     const resp = await gh.request(`GET /repos/{owner}/{repo}/contents/{path}`, {
//         owner, path, repo, headers: {
//             'X-GitHub-Api-Version': '2022-11-28',
//             'Accept': 'application/vnd.github.raw+json'
//         }
//     });
//     const document = resp.data;
//     return JSON.parse(document);
// }