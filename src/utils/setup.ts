import * as core from '@actions/core'
import {
  ActionArguments,
  ActionSecretArguments,
  LifecycleStage,
  Provider,
  SbomRestApiArguments
} from '../types/arguments'

/**
 * Assembles the requisite input arguments provided to the GitHub Action.
 * @returns {*} An object of secret and public arguments.
 */
export function setup(): ActionArguments {
  core.debug(`Collecting run time arguments...`)
  let actionArguments = _actionArguments()
  core.debug(`Action Arguments: ${JSON.stringify(actionArguments)}`)
  return actionArguments
}

export function _secretArguments(): ActionSecretArguments {
  return {
    snSbomUser: core.getInput('snSbomUser'),
    snSbomPassword: core.getInput('snSbomPassword'),
    snInstanceUrl: new URL(core.getInput('snInstanceUrl')).href,
    ghToken: core.getInput('ghToken')
  }
}

export function _sbomRestApiArguments(): SbomRestApiArguments {
  return {
    businessApplicationId: core.getInput('businessApplicationId'),
    businessApplicationName: core.getInput('businessApplicationName'),
    buildId: core.getInput('buildId'),
    productModelId: core.getInput('productModelId'),
    requestedBy: core.getInput('requestedBy'),
    lifecycleStage: core.getInput('lifecycleStage') as LifecycleStage,
    fetchVulnerabilityInfo: core.getInput('fetchVulnerabilityInfo') === 'true',
    fetchPackageInfo: core.getInput('fetchPackageInfo') === 'true',
    sourceSbom: core.getInput('sourceSbom')
  }
}

export function _actionArguments(): ActionArguments {
  return {
    ghAccountOwner: core.getInput('ghAccountOwner'),
    provider: core.getInput('provider') as Provider,
    repository: core.getInput('repository'),
    path: core.getInput('path'),
    secrets: _secretArguments(),
    sbomRestApiArguments: _sbomRestApiArguments()
  }
}
