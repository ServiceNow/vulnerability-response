import { ActionArguments, UploadApiResponseBody, UploadApiResponseObject } from '@/src/types/action'
import { REQUEST_STATUS_ERROR_INSUFFICIENT_DATA } from '@/src/types/errors'
import * as core from '@actions/core'

export function generateStatusUrl(actionArguments: ActionArguments, bomRecordId: string) {
  let statusSearchParams = new URLSearchParams()
  statusSearchParams.append('bomRecordId', bomRecordId)
  let url = new URL('/api/sbom/core/upload/status', actionArguments.secrets.snInstanceUrl)
  url.search = statusSearchParams.toString()
  return url
}

export async function status(actionArguments: ActionArguments, uploadOperationResponseObject: UploadApiResponseObject) {
  if (!!uploadOperationResponseObject.data.result.bomRecordId) {
    throw new Error(REQUEST_STATUS_ERROR_INSUFFICIENT_DATA('Missing bomRecordId').message)
  }

  let statusUrl = generateStatusUrl(actionArguments, uploadOperationResponseObject.data.result.bomRecordId!)
  console.log(
    'status: ',
    await _performStatus(statusUrl, actionArguments.secrets.snSbomUser, actionArguments.secrets.snSbomPassword)
  )
}

export async function _performStatus(statusUrl: URL, snSbomUser: string, snSbomPassword: string) {
  return await fetch(statusUrl, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      Authorization: `Basic ${Buffer.from(snSbomUser + ':' + snSbomPassword).toString('base64')}`
    }
  })
    .then(response => response.json())
    .then(data => ({ data: data }))
    .catch(error => {
      core.warning(`An error occurred while retrieving status of SBOM: ${error.message}`)
      throw error
    })
}
