import { ActionArguments, StatusApiResponseBody, UploadApiResponseObject } from '@/src/types/action'
import { REQUEST_STATUS_ERROR_INSUFFICIENT_DATA } from '@/src/types/errors'
import * as core from '@actions/core'
import ProgressBar from '@/src/utils/summary'
import * as process from 'node:process'
import * as statusUtils from '@/src/api/status'

export function generateStatusUrl(actionArguments: ActionArguments, bomRecordId: string) {
  let statusSearchParams = new URLSearchParams()
  statusSearchParams.append('bomRecordId', bomRecordId)
  let url = new URL('/api/sbom/core/upload/status', actionArguments.secrets.snInstanceUrl)
  url.search = statusSearchParams.toString()
  return url
}

function _onStatusPollEnded(history: StatusApiResponseBody[]): StatusApiResponseBody | undefined {
  if (history.length === 0) {
    return undefined
  }
  return history.pop()
}

export async function status(actionArguments: ActionArguments, uploadOperationResponseObject: UploadApiResponseObject) {
  if (uploadOperationResponseObject.data.result.bomRecordId == undefined) {
    throw new Error(REQUEST_STATUS_ERROR_INSUFFICIENT_DATA('Missing bomRecordId').message)
  }

  let statusUrl = generateStatusUrl(actionArguments, uploadOperationResponseObject.data.result.bomRecordId!)
  let numPolls = 0,
    MAX_NUM_POLLS = 5
  let pollHistory: StatusApiResponseBody[] = []

  console.log('Polling processing status...')
  const total = 100
  const progressBar = new ProgressBar(total, MAX_NUM_POLLS)
  let current = 0

  let finalResults: StatusApiResponseBody | undefined = undefined
  let isDonePolling = false

  function endPolling(intervalId: ReturnType<typeof setTimeout>, pollHistory: StatusApiResponseBody[]) {
    clearInterval(intervalId)
    finalResults = _onStatusPollEnded(pollHistory)
    isDonePolling = true
  }

  process.env.NODE_ENV !== 'test' && (await core.summary.addHeading('SBOM Processing Status').write())
  let intervalId = setInterval(async () => {
    if (numPolls++ < MAX_NUM_POLLS) {
      let results = await statusUtils._performStatus(
        statusUrl,
        actionArguments.secrets.snSbomUser,
        actionArguments.secrets.snSbomPassword
      )
      pollHistory.push(results)
      current += total / MAX_NUM_POLLS
      progressBar.update(current)

      if (results.result.uploadStatus === 'processed' && results.result.additionalInfoStatus === 'complete') {
        endPolling(intervalId, pollHistory)
      }
    } else {
      console.log('Maximum number of retries reached before processing was complete...')
      endPolling(intervalId, pollHistory)
    }
  }, 5000)

  while (!isDonePolling) {}
  return finalResults
}

export async function _performStatus(
  statusUrl: URL,
  snSbomUser: string,
  snSbomPassword: string
): Promise<StatusApiResponseBody> {
  return await fetch(statusUrl, {
    headers: {
      'Content-Type': 'application/json',
      Authorization: `Basic ${Buffer.from(snSbomUser + ':' + snSbomPassword).toString('base64')}`
    }
  })
    .then(response => response.json())
    .then(data => data)
    .catch(error => {
      core.warning(`An error occurred while retrieving status of SBOM: ${error.message}`)
      throw error
    })
}
