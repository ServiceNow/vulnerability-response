import { ActionArguments, FetchedSbomDocument } from '@/src/types/arguments'

import core from '@actions/core'

export function generateUploadUrl(actionArguments: ActionArguments) {
  let { sbomRestApiUploadArguments } = actionArguments
  let uploadSearchParams = new URLSearchParams()
  Object.entries(sbomRestApiUploadArguments ?? {})
    .filter(([_, value]) => !!value)
    .forEach(([key, value]) => {
      uploadSearchParams.append(key, value)
    })

  let url = new URL('/api/sbom/core/upload', actionArguments.secrets.snInstanceUrl)
  url.search = uploadSearchParams.toString()
  return url
}

export async function upload(actionArguments: ActionArguments, payload: FetchedSbomDocument) {
  let uploadUrl = generateUploadUrl(actionArguments)
  let { snSbomUser, snSbomPassword } = actionArguments.secrets

  let uploadOperationResults = await fetch(uploadUrl, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      Authorization: `Basic ${Buffer.from(snSbomUser + ':' + snSbomPassword).toString('base64')}`
    },
    body: JSON.stringify(payload.document)
  })
    .then(response => response.json())
    .then(data => ({
      data,
      documentName: payload.documentName
    }))
    .catch(error => {
      core.warning(`An error occurred while uploading SBOM: ${error.message}`)
      throw error
    })

  return uploadOperationResults
}
