import {
  ActionArguments,
  FetchedSbomDocument,
  FetchFromDependencyGraphArguments
} from '@/src/types/arguments'
import { allPropertiesDefined } from '@/src/utils/utils'
import {
  FETCH_DEPENDENCY_GRAPH_STATUS_404,
  FETCH_DEPENDENCY_GRAPH_STATUS_403,
  INVALID_ARGS_FOR_DEPENDENCY_GRAPH_FETCH
} from '@/src/types/errors'
import * as utils from '@/src/providers/requestBuilder'
import core from '@actions/core'
import dotenv from 'dotenv'
dotenv.config()

export async function fetchFromDependencyGraph(
  actionArguments: ActionArguments
): Promise<FetchedSbomDocument> {
  let requestArguments: FetchFromDependencyGraphArguments = {
    ghAccountOwner: actionArguments.ghAccountOwner,
    ghToken: actionArguments.secrets.ghToken,
    repository: actionArguments.repository
  }
  if (
    !allPropertiesDefined<FetchFromDependencyGraphArguments>(requestArguments)
  ) {
    throw new Error(INVALID_ARGS_FOR_DEPENDENCY_GRAPH_FETCH.message)
  }

  let request = new utils.RequestBuilder()
    .url(
      new URL(
        `https://api.github.com/repos/${requestArguments.ghAccountOwner}/${requestArguments.repository}/dependency-graph/sbom`
      )
    )
    .header('Accept', 'application/vnd.github+json')
    .header('Authorization', `Bearer ${requestArguments.ghToken}`)
    .header('X-GitHub-Api-Version', '2022-11-28')
    .build()

  let response = await request
  let data = await response
  let body = await data.json()

  if (process.env.NODE_ENV !== 'test') {
    core.debug(`Full request to GitHub: ${JSON.stringify(request, null, 2)}`)
    core.debug(
      `Full response from GitHub: ${JSON.stringify(response, null, 2)}`
    )
  }

  if (data.status === 404) {
    throw new Error(
      FETCH_DEPENDENCY_GRAPH_STATUS_404(JSON.stringify(body)).message
    )
  } else if (data.status === 403) {
    throw new Error(
      FETCH_DEPENDENCY_GRAPH_STATUS_403(JSON.stringify(body)).message
    )
  } else {
    return { document: body.sbom, documentName: body.sbom.name, type: 'spdx' }
  }
}
